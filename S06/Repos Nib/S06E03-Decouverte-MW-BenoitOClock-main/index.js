const express = require("express");
const port = 4000;

const app = express();

/*
  un MW express est une fonction qui reÃ§oit 3 paramÃ¨tres
  - request: un objet reprÃ©sentant la requÃªte reÃ§ue
  - response: un objet reprÃ©sentant la rÃ©ponse Ã  renvoyer
  - next: une fonction dont l'exÃ©cution indique Ã  l'application de passer au MW suivant

  Chacun des MW reÃ§oit la requÃªte et la rÃ©ponse provenant du MW prÃ©cÃ©dent.
  Si un premier MW modifie par exemple l'objet response, le MW suivant recevra cet objet modifiÃ©
*/

/*
 cette fonction renvoie une fonction qui est utilisÃ©e comme middleware
 exactement comme le fait la mÃ©thode express.static
*/
function logger(prefix) {
  return function (request, response, next) {
    console.log(`${prefix} ${request.method} ${request.url} ${request.ip}`);
    next();
  };
}

app.use(logger("->")); // le middleware qui est ajoutÃ© est la valeur renvoyÃ©e par l'exÃ©cution de la fonction logger
app.use(express.static("./public"));

/*
  L'execution des MW associÃ©s Ã  des routes est conditionnÃ©e par la correspondance de la mÃ©thode et du chemin
  Le MW ci-dessous n'est executÃ© si et seulement si la requÃªte reÃ§ue est GET '/'
  Dans le cas contraire, express passe au MW suivant
*/
app.get("/", (request, response) => {
  response.send("Hello");
});

app.get("/mimirs", (request, response) => {
  response.send("Coucou les mimirs");
});

app.use((request, response) => {
  console.log(
    "Je suis le dernier MW. Je suis exÃ©cutÃ© car la requÃªte reÃ§ue ne correspondait Ã  aucune route"
  );
});

app.listen(port, () => {
  console.log(`ðŸš€ server ready: http://localhost:${port}`);
});
